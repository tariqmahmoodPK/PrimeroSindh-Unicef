{"version":3,"file":"createObjectURL-cjs.js","sources":["createObjectURL.js","../utils/generateUUID.js"],"sourcesContent":["/* eslint-env node */\n/* globals location, XMLHttpRequest, DOMException */\n\n// Imperfectly polyfill jsdom for testing `Blob`/`File`\n\n// Todo: `generateUUID` and `whatwgURL` can be removed once\n//    `URL.createObjectURL` may be implemented in jsdom:\n//    https://github.com/jsdom/jsdom/issues/1721\n//    though local-xmlhttprequest may need to be adapted\n// import whatwgURL from 'whatwg-url';\n\n// // eslint-disable-next-line node/no-unpublished-import\n// import utils from 'jsdom/lib/jsdom/living/generated/utils.js';\nimport generateUUID from '../utils/generateUUID.js';\n\n/* globals require */\n// These are not working well with Rollup as imports\n// We also need to tweak `XMLHttpRequest` which our types\n//    rely on to obtain the Blob/File content\n/* eslint-disable node/no-unpublished-require, import/no-commonjs */\nconst whatwgURL = require('whatwg-url');\nconst utils = require('jsdom/lib/jsdom/living/generated/utils');\n/* eslint-enable node/no-unpublished-require, import/no-commonjs */\n\nconst {serializeURLOrigin, parseURL} = whatwgURL;\n\n/*\nboth are problematic:\neslint-disable-next-line node/no-unpublished-import\neslint-disable node/file-extension-in-import, import/extensions\nimport {serializeURLOrigin, parseURL} from 'whatwg-url';\nimport utils from 'jsdom/lib/jsdom/living/generated/utils';\n*/\n\nconst blobURLs = {};\nconst createObjectURL = function (blob) {\n    // https://github.com/jsdom/jsdom/issues/1721#issuecomment-282465529\n    const blobURL = 'blob:' +\n        serializeURLOrigin(parseURL(location.href)) + '/' + generateUUID();\n    blobURLs[blobURL] = blob;\n    return blobURL;\n};\n\nconst revokeObjectURL = function (blobURL) {\n    delete blobURLs[blobURL];\n};\n\nconst impl = utils.implSymbol;\nconst _xhropen = XMLHttpRequest.prototype.open;\n// We only handle the case of binary, so no need to override `open`\n//   in all cases; but this only works if override is called first\nconst xmlHttpRequestOverrideMimeType = function ({polyfillDataURLs} = {}) {\n    const _xhrOverrideMimeType = XMLHttpRequest.prototype.overrideMimeType;\n    return function (mimeType, ...args) {\n        if (mimeType === 'text/plain; charset=x-user-defined') {\n            this.open = function (method, url, async) {\n                if (url.startsWith('blob:')) {\n                    const blob = blobURLs[url];\n                    if (!blob) {\n                        this.send = function () {\n                            throw new DOMException(\n                                `Failed to execute 'send' on ` +\n                                    `'XMLHttpRequest': Failed to ` +\n                                    `load '${url}'`,\n                                'NetworkError'\n                            );\n                        };\n                        return undefined;\n                    }\n                    const responseType = 'text/plain'; // blob.type;\n                    // utf16le and base64 both convert lone surrogates\n                    const encoded = blob[impl]._buffer.toString('binary');\n                    // Not usable in jsdom which makes properties readonly,\n                    //   but local-xmlhttprequest can use (and jsdom can\n                    //   handle data URLs anyways)\n                    if (polyfillDataURLs) {\n                        this.status = 200;\n                        this.send = function () {\n                            // Empty\n                        };\n                        this.responseType = responseType;\n                        this.responseText = encoded;\n                        return undefined;\n                    }\n                    url = 'data:' + responseType + ',' +\n                        encodeURIComponent(encoded);\n                }\n                return _xhropen.call(this, method, url, async);\n            };\n        }\n        // The presence of `XMLHttpRequest.prototype.overrideMimeType`\n        //   is not really needed here, so making optional\n        return _xhrOverrideMimeType &&\n            _xhrOverrideMimeType.call(this, mimeType, ...args);\n    };\n};\n\nexport {createObjectURL, xmlHttpRequestOverrideMimeType, revokeObjectURL};\n","/* globals performance */\n\n// The `performance` global is optional\n\n/**\n * @todo We could use `import generateUUID from 'uuid/v4';` (but it needs\n *   crypto library, etc.; `rollup-plugin-node-builtins` doesn't recommend\n *   using its own version and though there is <https://www.npmjs.com/package/crypto-browserify>,\n *   it may be troublesome to bundle and not strongly needed)\n * @returns {string}\n */\nexport default function generateUUID () { //  Adapted from original: public domain/MIT: http://stackoverflow.com/a/8809472/271577\n    /* istanbul ignore next */\n    let d = new Date().getTime() +\n    // use high-precision timer if available\n    (typeof performance !== 'undefined' && typeof performance.now === 'function'\n        ? performance.now()\n        : 0);\n\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/gu, function (c) {\n        /* eslint-disable no-bitwise */\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n        /* eslint-enable no-bitwise */\n    });\n}\n"],"names":["whatwgURL","require","utils","serializeURLOrigin","parseURL","blobURLs","impl","implSymbol","_xhropen","XMLHttpRequest","prototype","open","createObjectURL","blob","blobURL","location","href","generateUUID","d","Date","getTime","performance","now","replace","c","r","Math","random","floor","toString","revokeObjectURL","xmlHttpRequestOverrideMimeType","polyfillDataURLs","_xhrOverrideMimeType","overrideMimeType","mimeType","method","url","async","startsWith","send","DOMException","encoded","_buffer","status","responseType","responseText","encodeURIComponent","call","this","args"],"mappings":"6MAoBA,IAAMA,EAAYC,QAAQ,cACpBC,EAAQD,QAAQ,0CAGfE,EAAgCH,EAAhCG,mBAAoBC,EAAYJ,EAAZI,SAUrBC,EAAW,GAaXC,EAAOJ,EAAMK,WACbC,EAAWC,eAAeC,UAAUC,uBAblB,SAAlBC,gBAA4BC,OAExBC,EAAU,QACZX,EAAmBC,EAASW,SAASC,OAAS,IC3BvC,SAASC,mBAEhBC,GAAI,IAAIC,MAAOC,WAEK,oBAAhBC,aAA0D,mBAApBA,YAAYC,IACpDD,YAAYC,MACZ,SAEC,uCAAuCC,QAAQ,SAAU,SAAUC,OAEhEC,GAAKP,EAAoB,GAAhBQ,KAAKC,UAAiB,GAAK,SAC1CT,EAAIQ,KAAKE,MAAMV,EAAI,KACL,MAANM,EAAYC,EAAS,EAAJA,EAAU,GAAMI,SAAS,ODeEZ,UACxDZ,EAASS,GAAWD,EACbC,qBAGa,SAAlBgB,gBAA4BhB,UACvBT,EAASS,qCAOmB,SAAjCiB,8FAAgE,GAApBC,IAAAA,iBACxCC,EAAuBxB,eAAeC,UAAUwB,wBAC/C,SAAUC,GACI,uCAAbA,SACKxB,KAAO,SAAUyB,EAAQC,EAAKC,MAC3BD,EAAIE,WAAW,SAAU,KACnB1B,EAAOR,EAASgC,OACjBxB,mBACI2B,KAAO,iBACF,IAAIC,aACN,2EAEaJ,OACb,sBAONK,EAAU7B,EAAKP,GAAMqC,QAAQd,SAAS,aAIxCG,cACKY,OAAS,SACTJ,KAAO,kBAGPK,aAXY,uBAYZC,aAAeJ,GAGxBL,EAAM,mBACFU,mBAAmBL,UAEpBlC,EAASwC,KAAKC,KAAMb,EAAQC,EAAKC,gCAlCtBY,mCAAAA,2BAuCnBjB,GACHA,EAAqBe,WAArBf,GAA0BgB,KAAMd,UAAae"}