{"version":3,"file":"undef.js","sources":["../../presets/sparse-undefined.js","../../node_modules/typeson/dist/typeson-esm.js","../../presets/undef.js","../../types/undef.js"],"sourcesContent":["const sparseUndefined = [\n    {\n        sparseArrays: {\n            testPlainObjects: true,\n            test (x) { return Array.isArray(x); },\n            replace (a, stateObj) {\n                stateObj.iterateUnsetNumeric = true;\n                return a;\n            }\n        }\n    },\n    {\n        sparseUndefined: {\n            test (x, stateObj) {\n                return typeof x === 'undefined' && stateObj.ownKeys === false;\n            },\n            replace (n) { return 0; },\n            revive (s) { return undefined; } // Will avoid adding anything\n        }\n    }\n];\n\nexport default sparseUndefined;\n","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\n/**\n * We keep this function minimized so if using two instances of this\n *   library, where one is minimized and one is not, it will still work\n *   with `hasConstructorOf`.\n * With ES6 classes, we may be able to simply use `class TypesonPromise\n *   extends Promise` and add a string tag for detection.\n * @param {function} f\n */\n// eslint-disable-next-line max-len\n// eslint-disable-next-line block-spacing, space-before-function-paren, space-before-blocks, space-infix-ops, semi, promise/avoid-new\nvar TypesonPromise = function TypesonPromise(f) {\n  _classCallCheck(this, TypesonPromise);\n\n  this.p = new Promise(f);\n}; // eslint-disable-next-line max-len\n// class TypesonPromise extends Promise {get[Symbol.toStringTag](){return 'TypesonPromise'};} // eslint-disable-line keyword-spacing, space-before-function-paren, space-before-blocks, block-spacing, semi\n\n\nTypesonPromise.__typeson__type__ = 'TypesonPromise'; // Note: core-js-bundle provides a `Symbol` polyfill\n\n/* istanbul ignore else */\n\nif (typeof Symbol !== 'undefined') {\n  // Ensure `isUserObject` will return `false` for `TypesonPromise`\n  TypesonPromise.prototype[Symbol.toStringTag] = 'TypesonPromise';\n}\n/**\n *\n * @param {function} [onFulfilled]\n * @param {function} [onRejected]\n * @returns {TypesonPromise}\n */\n\n\nTypesonPromise.prototype.then = function (onFulfilled, onRejected) {\n  var _this = this;\n\n  return new TypesonPromise(function (typesonResolve, typesonReject) {\n    // eslint-disable-next-line promise/catch-or-return\n    _this.p.then(function (res) {\n      // eslint-disable-next-line promise/always-return\n      typesonResolve(onFulfilled ? onFulfilled(res) : res);\n    })[\"catch\"](function (res) {\n      return onRejected ? onRejected(res) : Promise.reject(res);\n    }).then(typesonResolve, typesonReject);\n  });\n};\n/**\n *\n * @param {function} onRejected\n * @returns {TypesonPromise}\n */\n\n\nTypesonPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\n/**\n *\n * @param {Any} v\n * @returns {TypesonPromise}\n */\n\n\nTypesonPromise.resolve = function (v) {\n  return new TypesonPromise(function (typesonResolve) {\n    typesonResolve(v);\n  });\n};\n/**\n *\n * @param {Any} v\n * @returns {TypesonPromise}\n */\n\n\nTypesonPromise.reject = function (v) {\n  return new TypesonPromise(function (typesonResolve, typesonReject) {\n    typesonReject(v);\n  });\n};\n\n['all', 'race'].forEach(function (meth) {\n  /**\n   *\n   * @param {Promise[]} promArr\n   * @returns {TypesonPromise}\n   */\n  TypesonPromise[meth] = function (promArr) {\n    return new TypesonPromise(function (typesonResolve, typesonReject) {\n      // eslint-disable-next-line promise/catch-or-return\n      Promise[meth](promArr.map(function (prom) {\n        return prom && prom.constructor && prom.constructor.__typeson__type__ === 'TypesonPromise' ? prom.p : prom;\n      })).then(typesonResolve, typesonReject);\n    });\n  };\n});\n\nvar _ref = {},\n    toStr = _ref.toString,\n    hasOwn = {}.hasOwnProperty,\n    getProto = Object.getPrototypeOf,\n    fnToString = hasOwn.toString;\n/**\n * Second argument not in use internally, but provided for utility.\n * @param {Any} v\n * @param {boolean} catchCheck\n * @returns {boolean}\n */\n\nfunction isThenable(v, catchCheck) {\n  return isObject(v) && typeof v.then === 'function' && (!catchCheck || typeof v[\"catch\"] === 'function');\n}\n/**\n *\n * @param {Any} val\n * @returns {string}\n */\n\n\nfunction toStringTag(val) {\n  return toStr.call(val).slice(8, -1);\n}\n/**\n * This function is dependent on both constructors\n *   being identical so any minimization is expected of both.\n * @param {Any} a\n * @param {function} b\n * @returns {boolean}\n */\n\n\nfunction hasConstructorOf(a, b) {\n  if (!a || _typeof(a) !== 'object') {\n    return false;\n  }\n\n  var proto = getProto(a);\n\n  if (!proto) {\n    return b === null;\n  }\n\n  var Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;\n\n  if (typeof Ctor !== 'function') {\n    return b === null;\n  }\n\n  if (b === Ctor) {\n    return true;\n  }\n\n  if (b !== null && fnToString.call(Ctor) === fnToString.call(b)) {\n    return true;\n  }\n\n  if (typeof b === 'function' && typeof Ctor.__typeson__type__ === 'string' && Ctor.__typeson__type__ === b.__typeson__type__) {\n    return true;\n  }\n\n  return false;\n}\n/**\n *\n * @param {Any} val\n * @returns {boolean}\n */\n\n\nfunction isPlainObject(val) {\n  // Mirrors jQuery's\n  if (!val || toStringTag(val) !== 'Object') {\n    return false;\n  }\n\n  var proto = getProto(val);\n\n  if (!proto) {\n    // `Object.create(null)`\n    return true;\n  }\n\n  return hasConstructorOf(val, Object);\n}\n/**\n *\n * @param {Any} val\n * @returns {boolean}\n */\n\n\nfunction isUserObject(val) {\n  if (!val || toStringTag(val) !== 'Object') {\n    return false;\n  }\n\n  var proto = getProto(val);\n\n  if (!proto) {\n    // `Object.create(null)`\n    return true;\n  }\n\n  return hasConstructorOf(val, Object) || isUserObject(proto);\n}\n/**\n *\n * @param {Any} v\n * @returns {boolean}\n */\n\n\nfunction isObject(v) {\n  return v && _typeof(v) === 'object';\n}\n/**\n *\n * @param {string} keyPathComponent\n * @returns {string}\n */\n\n\nfunction escapeKeyPathComponent(keyPathComponent) {\n  return keyPathComponent.replace(/~/g, '~0').replace(/\\./g, '~1');\n}\n/**\n *\n * @param {string} keyPathComponent\n * @returns {string}\n */\n\n\nfunction unescapeKeyPathComponent(keyPathComponent) {\n  return keyPathComponent.replace(/~1/g, '.').replace(/~0/g, '~');\n}\n/**\n * @param {PlainObject|GenericArray} obj\n * @param {string} keyPath\n * @returns {Any}\n */\n\n\nfunction getByKeyPath(obj, keyPath) {\n  if (keyPath === '') {\n    return obj;\n  }\n\n  var period = keyPath.indexOf('.');\n\n  if (period > -1) {\n    var innerObj = obj[unescapeKeyPathComponent(keyPath.slice(0, period))];\n    return innerObj === undefined ? undefined : getByKeyPath(innerObj, keyPath.slice(period + 1));\n  }\n\n  return obj[unescapeKeyPathComponent(keyPath)];\n}\n/**\n *\n * @param {PlainObject} obj\n * @param {string} keyPath\n * @param {Any} value\n * @returns {Any}\n */\n\n\nfunction setAtKeyPath(obj, keyPath, value) {\n  if (keyPath === '') {\n    return value;\n  }\n\n  var period = keyPath.indexOf('.');\n\n  if (period > -1) {\n    var innerObj = obj[unescapeKeyPathComponent(keyPath.slice(0, period))];\n    return setAtKeyPath(innerObj, keyPath.slice(period + 1), value);\n  }\n\n  obj[unescapeKeyPathComponent(keyPath)] = value;\n  return obj;\n}\n/**\n *\n * @param {external:JSON} value\n * @returns {\"null\"|\"array\"|\"undefined\"|\"boolean\"|\"number\"|\"string\"|\n *  \"object\"|\"symbol\"}\n */\n\n\nfunction getJSONType(value) {\n  return value === null ? 'null' : Array.isArray(value) ? 'array' : _typeof(value);\n}\n\nvar keys = Object.keys,\n    isArray = Array.isArray,\n    hasOwn$1 = {}.hasOwnProperty,\n    internalStateObjPropsToIgnore = ['type', 'replaced', 'iterateIn', 'iterateUnsetNumeric'];\n/**\n * Handle plain object revivers first so reference setting can use\n * revived type (e.g., array instead of object); assumes revived\n * has same structure or will otherwise break subsequent references.\n * @param {PlainObjectType} a\n * @param {PlainObjectType} b\n * @returns {1|-1|boolean}\n */\n\nfunction nestedPathsFirst(a, b) {\n  if (a.keypath === '') {\n    return -1;\n  }\n\n  var as = a.keypath.match(/\\./g) || 0;\n  var bs = b.keypath.match(/\\./g) || 0;\n\n  if (as) {\n    as = as.length;\n  }\n\n  if (bs) {\n    bs = bs.length;\n  }\n\n  return as > bs ? -1 : as < bs ? 1 : a.keypath < b.keypath ? -1 : a.keypath > b.keypath;\n}\n/**\n * An instance of this class can be used to call `stringify()` and `parse()`.\n * Typeson resolves cyclic references by default. Can also be extended to\n * support custom types using the register() method.\n *\n * @class\n * @param {{cyclic: boolean}} [options] - if cyclic (default true),\n *   cyclic references will be handled gracefully.\n */\n\n\nvar Typeson =\n/*#__PURE__*/\nfunction () {\n  function Typeson(options) {\n    _classCallCheck(this, Typeson);\n\n    this.options = options; // Replacers signature: replace (value). Returns falsy if not\n    //   replacing. Otherwise ['Date', value.getTime()]\n\n    this.plainObjectReplacers = [];\n    this.nonplainObjectReplacers = []; // Revivers: [{type => reviver}, {plain: boolean}].\n    //   Sample: [{'Date': value => new Date(value)}, {plain: false}]\n\n    this.revivers = {};\n    /** Types registered via `register()`. */\n\n    this.types = {};\n  }\n  /**\n  * @typedef {null|boolean|number|string|GenericArray|PlainObject} JSON\n  */\n\n  /**\n  * @callback JSONReplacer\n  * @param {\"\"|string} key\n  * @param {JSON} value\n  * @returns {number|string|boolean|null|PlainObject|undefined}\n  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The%20replacer%20parameter\n  */\n\n  /**\n   * Serialize given object to Typeson.\n   * Initial arguments work identical to those of `JSON.stringify`.\n   * The `replacer` argument has nothing to do with our replacers.\n   * @param {Any} obj\n   * @param {JSONReplacer|string[]} replacer\n   * @param {number|string} space\n   * @param {object} opts\n   * @returns {string|Promise} Promise resolves to a string\n   */\n\n\n  _createClass(Typeson, [{\n    key: \"stringify\",\n    value: function stringify(obj, replacer, space, opts) {\n      opts = _objectSpread2({}, this.options, {}, opts, {\n        stringification: true\n      });\n      var encapsulated = this.encapsulate(obj, null, opts);\n\n      if (isArray(encapsulated)) {\n        return JSON.stringify(encapsulated[0], replacer, space);\n      }\n\n      return encapsulated.then(function (res) {\n        return JSON.stringify(res, replacer, space);\n      });\n    }\n    /**\n     * Also sync but throws on non-sync result.\n     * @param {Any} obj\n     * @param {JSONReplacer|string[]} replacer\n     * @param {number|string} space\n     * @param {object} opts\n     * @returns {string}\n     */\n\n  }, {\n    key: \"stringifySync\",\n    value: function stringifySync(obj, replacer, space, opts) {\n      return this.stringify(obj, replacer, space, _objectSpread2({\n        throwOnBadSyncType: true\n      }, opts, {\n        sync: true\n      }));\n    }\n    /**\n     *\n     * @param {Any} obj\n     * @param {JSONReplacer|string[]} replacer\n     * @param {number|string} space\n     * @param {object} opts\n     * @returns {Promise<string>}\n     */\n\n  }, {\n    key: \"stringifyAsync\",\n    value: function stringifyAsync(obj, replacer, space, opts) {\n      return this.stringify(obj, replacer, space, _objectSpread2({\n        throwOnBadSyncType: true\n      }, opts, {\n        sync: false\n      }));\n    }\n    /**\n     * Parse Typeson back into an obejct.\n     * Initial arguments works identical to those of `JSON.parse()`.\n     * @param {string} text\n     * @param {function} reviver This JSON reviver has nothing to do with\n     *   our revivers.\n     * @param {object} opts\n     * @returns {external:JSON}\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(text, reviver, opts) {\n      opts = _objectSpread2({}, this.options, {}, opts, {\n        parse: true\n      });\n      return this.revive(JSON.parse(text, reviver), opts);\n    }\n    /**\n    * Also sync but throws on non-sync result.\n    * @param {string} text\n    * @param {function} reviver This JSON reviver has nothing to do with\n    *   our revivers.\n    * @param {object} opts\n    * @returns {external:JSON}\n    */\n\n  }, {\n    key: \"parseSync\",\n    value: function parseSync(text, reviver, opts) {\n      return this.parse(text, reviver, _objectSpread2({\n        throwOnBadSyncType: true\n      }, opts, {\n        sync: true\n      }));\n    }\n    /**\n    * @param {string} text\n    * @param {function} reviver This JSON reviver has nothing to do with\n    *   our revivers.\n    * @param {object} opts\n    * @returns {Promise} Resolves to `external:JSON`\n    */\n\n  }, {\n    key: \"parseAsync\",\n    value: function parseAsync(text, reviver, opts) {\n      return this.parse(text, reviver, _objectSpread2({\n        throwOnBadSyncType: true\n      }, opts, {\n        sync: false\n      }));\n    }\n    /**\n     *\n     * @param {Any} obj\n     * @param {object} stateObj\n     * @param {object} [opts={}]\n     * @returns {string[]|false}\n     */\n\n  }, {\n    key: \"specialTypeNames\",\n    value: function specialTypeNames(obj, stateObj) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      opts.returnTypeNames = true;\n      return this.encapsulate(obj, stateObj, opts);\n    }\n    /**\n     *\n     * @param {Any} obj\n     * @param {PlainObject} stateObj\n     * @param {PlainObject} [opts={}]\n     * @returns {Promise|GenericArray|PlainObject|string|false}\n     */\n\n  }, {\n    key: \"rootTypeName\",\n    value: function rootTypeName(obj, stateObj) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      opts.iterateNone = true;\n      return this.encapsulate(obj, stateObj, opts);\n    }\n    /**\n     * Encapsulate a complex object into a plain Object by replacing\n     * registered types with plain objects representing the types data.\n     *\n     * This method is used internally by `Typeson.stringify()`.\n     * @param {Any} obj - Object to encapsulate.\n     * @param {PlainObject} stateObj\n     * @param {PlainObject} opts\n     * @returns {Promise|GenericArray|PlainObject|string|false}\n     */\n\n  }, {\n    key: \"encapsulate\",\n    value: function encapsulate(obj, stateObj, opts) {\n      opts = _objectSpread2({\n        sync: true\n      }, this.options, {}, opts);\n      var _opts = opts,\n          sync = _opts.sync;\n      var that = this,\n          types = {},\n          refObjs = [],\n          // For checking cyclic references\n      refKeys = [],\n          // For checking cyclic references\n      promisesDataRoot = []; // Clone the object deeply while at the same time replacing any\n      //   special types or cyclic reference:\n\n      var cyclic = 'cyclic' in opts ? opts.cyclic : true;\n      var _opts2 = opts,\n          encapsulateObserver = _opts2.encapsulateObserver;\n\n      var ret = _encapsulate('', obj, cyclic, stateObj || {}, promisesDataRoot);\n      /**\n       *\n       * @param {Any} ret\n       * @returns {GenericArray|PlainObject|string|false}\n       */\n\n\n      function finish(ret) {\n        // Add `$types` to result only if we ever bumped into a\n        //  special type (or special case where object has own `$types`)\n        var typeNames = Object.values(types);\n\n        if (opts.iterateNone) {\n          if (typeNames.length) {\n            return typeNames[0];\n          }\n\n          return Typeson.getJSONType(ret);\n        }\n\n        if (typeNames.length) {\n          if (opts.returnTypeNames) {\n            return _toConsumableArray(new Set(typeNames));\n          } // Special if array (or a primitive) was serialized\n          //   because JSON would ignore custom `$types` prop on it\n\n\n          if (!ret || !isPlainObject(ret) || // Also need to handle if this is an object with its\n          //   own `$types` property (to avoid ambiguity)\n          hasOwn$1.call(ret, '$types')) {\n            ret = {\n              $: ret,\n              $types: {\n                $: types\n              }\n            };\n          } else {\n            ret.$types = types;\n          } // No special types\n\n        } else if (isObject(ret) && hasOwn$1.call(ret, '$types')) {\n          ret = {\n            $: ret,\n            $types: true\n          };\n        }\n\n        if (opts.returnTypeNames) {\n          return false;\n        }\n\n        return ret;\n      }\n      /**\n       *\n       * @param {Any} ret\n       * @param {GenericArray} promisesData\n       * @returns {Promise<Any>}\n       */\n\n\n      function checkPromises(_x, _x2) {\n        return _checkPromises.apply(this, arguments);\n      }\n      /**\n       *\n       * @param {object} stateObj\n       * @param {object} ownKeysObj\n       * @param {function} cb\n       * @returns {undefined}\n       */\n\n\n      function _checkPromises() {\n        _checkPromises = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee2(ret, promisesData) {\n          var promResults;\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return Promise.all(promisesData.map(function (pd) {\n                    return pd[1].p;\n                  }));\n\n                case 2:\n                  promResults = _context2.sent;\n                  _context2.next = 5;\n                  return Promise.all(promResults.map(\n                  /*#__PURE__*/\n                  function () {\n                    var _ref = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee(promResult) {\n                      var newPromisesData, _promisesData$splice, _promisesData$splice2, prData, _prData, keyPath, cyclic, stateObj, parentObj, key, detectedType, encaps, isTypesonPromise, encaps2;\n\n                      return regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              newPromisesData = [];\n                              _promisesData$splice = promisesData.splice(0, 1), _promisesData$splice2 = _slicedToArray(_promisesData$splice, 1), prData = _promisesData$splice2[0];\n                              _prData = _slicedToArray(prData, 7), keyPath = _prData[0], cyclic = _prData[2], stateObj = _prData[3], parentObj = _prData[4], key = _prData[5], detectedType = _prData[6];\n                              encaps = _encapsulate(keyPath, promResult, cyclic, stateObj, newPromisesData, true, detectedType);\n                              isTypesonPromise = hasConstructorOf(encaps, TypesonPromise); // Handle case where an embedded custom type itself\n                              //   returns a `Typeson.Promise`\n\n                              if (!(keyPath && isTypesonPromise)) {\n                                _context.next = 11;\n                                break;\n                              }\n\n                              _context.next = 8;\n                              return encaps.p;\n\n                            case 8:\n                              encaps2 = _context.sent;\n                              parentObj[key] = encaps2;\n                              return _context.abrupt(\"return\", checkPromises(ret, newPromisesData));\n\n                            case 11:\n                              if (keyPath) {\n                                parentObj[key] = encaps;\n                              } else if (isTypesonPromise) {\n                                ret = encaps.p;\n                              } else {\n                                // If this is itself a `Typeson.Promise` (because the\n                                //   original value supplied was a `Promise` or\n                                //   because the supplied custom type value resolved\n                                //   to one), returning it below will be fine since\n                                //   a `Promise` is expected anyways given current\n                                //   config (and if not a `Promise`, it will be ready\n                                //   as the resolve value)\n                                ret = encaps;\n                              }\n\n                              return _context.abrupt(\"return\", checkPromises(ret, newPromisesData));\n\n                            case 13:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee);\n                    }));\n\n                    return function (_x3) {\n                      return _ref.apply(this, arguments);\n                    };\n                  }()));\n\n                case 5:\n                  return _context2.abrupt(\"return\", ret);\n\n                case 6:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n        return _checkPromises.apply(this, arguments);\n      }\n\n      function _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, cb) {\n        Object.assign(stateObj, ownKeysObj);\n        var vals = internalStateObjPropsToIgnore.map(function (prop) {\n          var tmp = stateObj[prop];\n          delete stateObj[prop];\n          return tmp;\n        }); // eslint-disable-next-line callback-return\n\n        cb();\n        internalStateObjPropsToIgnore.forEach(function (prop, i) {\n          stateObj[prop] = vals[i];\n        });\n      }\n      /**\n       *\n       * @param {string} keypath\n       * @param {Any} value\n       * @param {boolean} cyclic\n       * @param {PlainObject} stateObj\n       * @param {boolean} promisesData\n       * @param {boolean} resolvingTypesonPromise\n       * @param {string} detectedType\n       * @returns {Any}\n       */\n\n\n      function _encapsulate(keypath, value, cyclic, stateObj, promisesData, resolvingTypesonPromise, detectedType) {\n        var ret;\n        var observerData = {};\n\n        var $typeof = _typeof(value);\n\n        var runObserver = encapsulateObserver ? function (obj) {\n          var type = detectedType || stateObj.type || Typeson.getJSONType(value);\n          encapsulateObserver(Object.assign(obj || observerData, {\n            keypath: keypath,\n            value: value,\n            cyclic: cyclic,\n            stateObj: stateObj,\n            promisesData: promisesData,\n            resolvingTypesonPromise: resolvingTypesonPromise,\n            awaitingTypesonPromise: hasConstructorOf(value, TypesonPromise)\n          }, {\n            type: type\n          }));\n        } : null;\n\n        if (['string', 'boolean', 'number', 'undefined'].includes($typeof)) {\n          if (value === undefined || $typeof === 'number' && (isNaN(value) || value === -Infinity || value === Infinity)) {\n            if (stateObj.replaced) {\n              ret = value;\n            } else {\n              ret = replace(keypath, value, stateObj, promisesData, false, resolvingTypesonPromise, runObserver);\n            }\n\n            if (ret !== value) {\n              observerData = {\n                replaced: ret\n              };\n            }\n          } else {\n            ret = value;\n          }\n\n          if (runObserver) {\n            runObserver();\n          }\n\n          return ret;\n        }\n\n        if (value === null) {\n          if (runObserver) {\n            runObserver();\n          }\n\n          return value;\n        }\n\n        if (cyclic && !stateObj.iterateIn && !stateObj.iterateUnsetNumeric && value && _typeof(value) === 'object') {\n          // Options set to detect cyclic references and be able\n          //   to rewrite them.\n          var refIndex = refObjs.indexOf(value);\n\n          if (refIndex < 0) {\n            if (cyclic === true) {\n              refObjs.push(value);\n              refKeys.push(keypath);\n            }\n          } else {\n            types[keypath] = '#';\n\n            if (runObserver) {\n              runObserver({\n                cyclicKeypath: refKeys[refIndex]\n              });\n            }\n\n            return '#' + refKeys[refIndex];\n          }\n        }\n\n        var isPlainObj = isPlainObject(value);\n        var isArr = isArray(value);\n        var replaced = // Running replace will cause infinite loop as will test\n        //   positive again\n        (isPlainObj || isArr) && (!that.plainObjectReplacers.length || stateObj.replaced) || stateObj.iterateIn ? // Optimization: if plain object and no plain-object\n        //   replacers, don't try finding a replacer\n        value : replace(keypath, value, stateObj, promisesData, isPlainObj || isArr, null, runObserver);\n        var clone;\n\n        if (replaced !== value) {\n          ret = replaced;\n          observerData = {\n            replaced: replaced\n          };\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (keypath === '' && hasConstructorOf(value, TypesonPromise)) {\n            promisesData.push([keypath, value, cyclic, stateObj, undefined, undefined, stateObj.type]);\n            ret = value;\n          } else if (isArr && stateObj.iterateIn !== 'object' || stateObj.iterateIn === 'array') {\n            clone = new Array(value.length);\n            observerData = {\n              clone: clone\n            };\n          } else if (!['function', 'symbol'].includes(_typeof(value)) && !('toJSON' in value) && !hasConstructorOf(value, TypesonPromise) && !hasConstructorOf(value, Promise) && !hasConstructorOf(value, ArrayBuffer) || isPlainObj || stateObj.iterateIn === 'object') {\n            clone = {};\n\n            if (stateObj.addLength) {\n              clone.length = value.length;\n            }\n\n            observerData = {\n              clone: clone\n            };\n          } else {\n            ret = value; // Only clone vanilla objects and arrays\n          }\n        }\n\n        if (runObserver) {\n          runObserver();\n        }\n\n        if (opts.iterateNone) {\n          return clone || ret;\n        }\n\n        if (!clone) {\n          return ret;\n        } // Iterate object or array\n\n\n        if (stateObj.iterateIn) {\n          var _loop = function _loop(key) {\n            var ownKeysObj = {\n              ownKeys: hasOwn$1.call(value, key)\n            };\n\n            _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, function () {\n              var kp = keypath + (keypath ? '.' : '') + escapeKeyPathComponent(key);\n\n              var val = _encapsulate(kp, value[key], Boolean(cyclic), stateObj, promisesData, resolvingTypesonPromise);\n\n              if (hasConstructorOf(val, TypesonPromise)) {\n                promisesData.push([kp, val, Boolean(cyclic), stateObj, clone, key, stateObj.type]);\n              } else if (val !== undefined) {\n                clone[key] = val;\n              }\n            });\n          };\n\n          // eslint-disable-next-line guard-for-in\n          for (var key in value) {\n            _loop(key);\n          }\n\n          if (runObserver) {\n            runObserver({\n              endIterateIn: true,\n              end: true\n            });\n          }\n        } else {\n          // Note: Non-indexes on arrays won't survive stringify so\n          //  somewhat wasteful for arrays, but so too is iterating\n          //  all numeric indexes on sparse arrays when not wanted\n          //  or filtering own keys for positive integers\n          keys(value).forEach(function (key) {\n            var kp = keypath + (keypath ? '.' : '') + escapeKeyPathComponent(key);\n            var ownKeysObj = {\n              ownKeys: true\n            };\n\n            _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, function () {\n              var val = _encapsulate(kp, value[key], Boolean(cyclic), stateObj, promisesData, resolvingTypesonPromise);\n\n              if (hasConstructorOf(val, TypesonPromise)) {\n                promisesData.push([kp, val, Boolean(cyclic), stateObj, clone, key, stateObj.type]);\n              } else if (val !== undefined) {\n                clone[key] = val;\n              }\n            });\n          });\n\n          if (runObserver) {\n            runObserver({\n              endIterateOwn: true,\n              end: true\n            });\n          }\n        } // Iterate array for non-own numeric properties (we can't\n        //   replace the prior loop though as it iterates non-integer\n        //   keys)\n\n\n        if (stateObj.iterateUnsetNumeric) {\n          var vl = value.length;\n\n          var _loop2 = function _loop2(i) {\n            if (!(i in value)) {\n              // No need to escape numeric\n              var kp = keypath + (keypath ? '.' : '') + i;\n              var ownKeysObj = {\n                ownKeys: false\n              };\n\n              _adaptBuiltinStateObjectProperties(stateObj, ownKeysObj, function () {\n                var val = _encapsulate(kp, undefined, Boolean(cyclic), stateObj, promisesData, resolvingTypesonPromise);\n\n                if (hasConstructorOf(val, TypesonPromise)) {\n                  promisesData.push([kp, val, Boolean(cyclic), stateObj, clone, i, stateObj.type]);\n                } else if (val !== undefined) {\n                  clone[i] = val;\n                }\n              });\n            }\n          };\n\n          for (var i = 0; i < vl; i++) {\n            _loop2(i);\n          }\n\n          if (runObserver) {\n            runObserver({\n              endIterateUnsetNumeric: true,\n              end: true\n            });\n          }\n        }\n\n        return clone;\n      }\n      /**\n       *\n       * @param {string} keypath\n       * @param {Any} value\n       * @param {PlainObject} stateObj\n       * @param {GenericArray} promisesData\n       * @param {boolean} plainObject\n       * @param {boolean} resolvingTypesonPromise\n       * @param {function} [runObserver]\n       * @returns {*}\n       */\n\n\n      function replace(keypath, value, stateObj, promisesData, plainObject, resolvingTypesonPromise, runObserver) {\n        // Encapsulate registered types\n        var replacers = plainObject ? that.plainObjectReplacers : that.nonplainObjectReplacers;\n        var i = replacers.length;\n\n        while (i--) {\n          var replacer = replacers[i];\n\n          if (replacer.test(value, stateObj)) {\n            var type = replacer.type;\n\n            if (that.revivers[type]) {\n              // Record the type only if a corresponding reviver\n              //   exists. This is to support specs where only\n              //   replacement is done.\n              // For example, ensuring deep cloning of the object,\n              //   or replacing a type to its equivalent without\n              //   the need to revive it.\n              var existing = types[keypath]; // type can comprise an array of types (see test\n              //   \"should support intermediate types\")\n\n              types[keypath] = existing ? [type].concat(existing) : type;\n            }\n\n            Object.assign(stateObj, {\n              type: type,\n              replaced: true\n            });\n\n            if ((sync || !replacer.replaceAsync) && !replacer.replace) {\n              if (runObserver) {\n                runObserver({\n                  typeDetected: true\n                });\n              }\n\n              return _encapsulate(keypath, value, cyclic && 'readonly', stateObj, promisesData, resolvingTypesonPromise, type);\n            }\n\n            if (runObserver) {\n              runObserver({\n                replacing: true\n              });\n            } // Now, also traverse the result in case it contains its\n            //   own types to replace\n\n\n            var replaceMethod = sync || !replacer.replaceAsync ? 'replace' : 'replaceAsync';\n            return _encapsulate(keypath, replacer[replaceMethod](value, stateObj), cyclic && 'readonly', stateObj, promisesData, resolvingTypesonPromise, type);\n          }\n        }\n\n        return value;\n      }\n\n      return promisesDataRoot.length ? sync && opts.throwOnBadSyncType ? function () {\n        throw new TypeError('Sync method requested but async result obtained');\n      }() : Promise.resolve(checkPromises(ret, promisesDataRoot)).then(finish) : !sync && opts.throwOnBadSyncType ? function () {\n        throw new TypeError('Async method requested but sync result obtained');\n      }() // If this is a synchronous request for stringification, yet\n      //   a promise is the result, we don't want to resolve leading\n      //   to an async result, so we return an array to avoid\n      //   ambiguity\n      : opts.stringification && sync ? [finish(ret)] : sync ? finish(ret) : Promise.resolve(finish(ret));\n    }\n    /**\n     * Also sync but throws on non-sync result.\n     * @param {*} obj\n     * @param {object} stateObj\n     * @param {object} opts\n     * @returns {*}\n     */\n\n  }, {\n    key: \"encapsulateSync\",\n    value: function encapsulateSync(obj, stateObj, opts) {\n      return this.encapsulate(obj, stateObj, _objectSpread2({\n        throwOnBadSyncType: true\n      }, opts, {\n        sync: true\n      }));\n    }\n    /**\n     * @param {*} obj\n     * @param {object} stateObj\n     * @param {object} opts\n     * @returns {*}\n     */\n\n  }, {\n    key: \"encapsulateAsync\",\n    value: function encapsulateAsync(obj, stateObj, opts) {\n      return this.encapsulate(obj, stateObj, _objectSpread2({\n        throwOnBadSyncType: true\n      }, opts, {\n        sync: false\n      }));\n    }\n    /**\n     * Revive an encapsulated object.\n     * This method is used internally by `Typeson.parse()`.\n     * @param {object} obj - Object to revive. If it has `$types` member, the\n     *   properties that are listed there will be replaced with its true type\n     *   instead of just plain objects.\n     * @param {object} opts\n     * @throws TypeError If mismatch between sync/async type and result\n     * @returns {Promise|*} If async, returns a Promise that resolves to `*`\n     */\n\n  }, {\n    key: \"revive\",\n    value: function revive(obj, opts) {\n      var types = obj && obj.$types; // No type info added. Revival not needed.\n\n      if (!types) {\n        return obj;\n      } // Object happened to have own `$types` property but with\n      //   no actual types, so we unescape and return that object\n\n\n      if (types === true) {\n        return obj.$;\n      }\n\n      opts = _objectSpread2({\n        sync: true\n      }, this.options, {}, opts);\n      var _opts3 = opts,\n          sync = _opts3.sync;\n      var keyPathResolutions = [];\n      var stateObj = {};\n      var ignore$Types = true; // Special when root object is not a trivial Object, it will\n      //   be encapsulated in `$`. It will also be encapsulated in\n      //   `$` if it has its own `$` property to avoid ambiguity\n\n      if (types.$ && isPlainObject(types.$)) {\n        obj = obj.$;\n        types = types.$;\n        ignore$Types = false;\n      }\n\n      var that = this;\n      /**\n       * @callback RevivalReducer\n       * @param {Any} value\n       * @param {string} type\n       * @returns {Any}\n       */\n\n      /**\n       *\n       * @param {string} type\n       * @param {Any} val\n       * @returns {[type]} [description]\n       */\n\n      function executeReviver(type, val) {\n        var _ref2 = that.revivers[type] || [],\n            _ref3 = _slicedToArray(_ref2, 1),\n            reviver = _ref3[0];\n\n        if (!reviver) {\n          throw new Error('Unregistered type: ' + type);\n        } // Only `sync` expected here, as problematic async would\n        //  be missing both `reviver` and `reviverAsync`, and\n        //  encapsulation shouldn't have added types, so\n        //  should have made an early exit\n\n\n        if (sync && !('revive' in reviver)) {\n          // Just return value as is\n          return val;\n        }\n\n        return reviver[sync && reviver.revive ? 'revive' : !sync && reviver.reviveAsync ? 'reviveAsync' : 'revive'](val, stateObj);\n      }\n      /**\n       *\n       * @returns {void|TypesonPromise<void>}\n       */\n\n\n      function revivePlainObjects() {\n        // const references = [];\n        // const reviveTypes = [];\n        var plainObjectTypes = [];\n        Object.entries(types).forEach(function (_ref4) {\n          var _ref5 = _slicedToArray(_ref4, 2),\n              keypath = _ref5[0],\n              type = _ref5[1];\n\n          if (type === '#') {\n            /*\n            references.push({\n                keypath,\n                reference: getByKeyPath(obj, keypath)\n            });\n            */\n            return;\n          }\n\n          [].concat(type).forEach(function (type) {\n            var _ref6 = that.revivers[type] || [null, {}],\n                _ref7 = _slicedToArray(_ref6, 2),\n                plain = _ref7[1].plain;\n\n            if (!plain) {\n              // reviveTypes.push({keypath, type});\n              return;\n            }\n\n            plainObjectTypes.push({\n              keypath: keypath,\n              type: type\n            });\n            delete types[keypath]; // Avoid repeating\n          });\n        });\n\n        if (!plainObjectTypes.length) {\n          return undefined;\n        } // console.log(plainObjectTypes.sort(nestedPathsFirst));\n\n        /**\n        * @typedef {PlainObject} PlainObjectType\n        * @property {string} keypath\n        * @property {string} type\n        */\n\n\n        return plainObjectTypes.sort(nestedPathsFirst).reduce(function reducer(possibleTypesonPromise, _ref8) {\n          var keypath = _ref8.keypath,\n              type = _ref8.type;\n\n          if (isThenable(possibleTypesonPromise)) {\n            return possibleTypesonPromise.then(function (val) {\n              return reducer(val, {\n                keypath: keypath,\n                type: type\n              });\n            });\n          } // console.log('obj', JSON.stringify(keypath), obj);\n\n\n          var val = getByKeyPath(obj, keypath);\n          val = executeReviver(type, val);\n\n          if (hasConstructorOf(val, TypesonPromise)) {\n            return val.then(function (v) {\n              var newVal = setAtKeyPath(obj, keypath, v);\n\n              if (newVal === v) {\n                obj = newVal;\n              }\n\n              return undefined;\n            });\n          }\n\n          var newVal = setAtKeyPath(obj, keypath, val);\n\n          if (newVal === val) {\n            obj = newVal;\n          }\n\n          return undefined;\n        }, undefined // This argument must be explicit\n        ); // references.forEach(({keypath, reference}) => {});\n        // reviveTypes.sort(nestedPathsFirst).forEach(() => {});\n      }\n\n      var revivalPromises = [];\n      /**\n       *\n       * @param {string} keypath\n       * @param {Any} value\n       * @param {?(Array|object)} target\n       * @param {Array|object} [clone]\n       * @param {string} [key]\n       * @returns {Any}\n       */\n\n      function _revive(keypath, value, target, clone, key) {\n        if (ignore$Types && keypath === '$types') {\n          return undefined;\n        }\n\n        var type = types[keypath];\n        var isArr = isArray(value);\n\n        if (isArr || isPlainObject(value)) {\n          var _clone = isArr ? new Array(value.length) : {}; // Iterate object or array\n\n\n          keys(value).forEach(function (k) {\n            var val = _revive(keypath + (keypath ? '.' : '') + escapeKeyPathComponent(k), value[k], target || _clone, _clone, k);\n\n            var set = function set(v) {\n              if (hasConstructorOf(v, Undefined)) {\n                _clone[k] = undefined;\n              } else if (v !== undefined) {\n                _clone[k] = v;\n              }\n\n              return v;\n            };\n\n            if (hasConstructorOf(val, TypesonPromise)) {\n              revivalPromises.push(val.then(function (ret) {\n                return set(ret);\n              }));\n            } else {\n              set(val);\n            }\n          });\n          value = _clone; // Try to resolve cyclic reference as soon as available\n\n          while (keyPathResolutions.length) {\n            var _keyPathResolutions$ = _slicedToArray(keyPathResolutions[0], 4),\n                _target = _keyPathResolutions$[0],\n                keyPath = _keyPathResolutions$[1],\n                _clone2 = _keyPathResolutions$[2],\n                k = _keyPathResolutions$[3];\n\n            var val = getByKeyPath(_target, keyPath); // Typeson.Undefined not expected here as not cyclic or\n            //   `undefined`\n\n            if (val !== undefined) {\n              _clone2[k] = val;\n            } else {\n              break;\n            }\n\n            keyPathResolutions.splice(0, 1);\n          }\n        }\n\n        if (!type) {\n          return value;\n        }\n\n        if (type === '#') {\n          var _ret = getByKeyPath(target, value.slice(1));\n\n          if (_ret === undefined) {\n            // Cyclic reference not yet available\n            keyPathResolutions.push([target, value.slice(1), clone, key]);\n          }\n\n          return _ret;\n        } // `type` can be an array here\n\n\n        return [].concat(type).reduce(function reducer(val, typ) {\n          if (hasConstructorOf(val, TypesonPromise)) {\n            return val.then(function (v) {\n              // TypesonPromise here too\n              return reducer(v, typ);\n            });\n          }\n\n          return executeReviver(typ, val);\n        }, value);\n      }\n      /**\n       *\n       * @param {Any} retrn\n       * @returns {undefined|Any}\n       */\n\n\n      function checkUndefined(retrn) {\n        return hasConstructorOf(retrn, Undefined) ? undefined : retrn;\n      }\n\n      var possibleTypesonPromise = revivePlainObjects();\n      var ret;\n\n      if (hasConstructorOf(possibleTypesonPromise, TypesonPromise)) {\n        ret = possibleTypesonPromise.then(function () {\n          return obj;\n        });\n      } else {\n        ret = _revive('', obj, null);\n\n        if (revivalPromises.length) {\n          // Ensure children resolved\n          ret = TypesonPromise.resolve(ret).then(function (r) {\n            return TypesonPromise.all([// May be a TypesonPromise or not\n            r].concat(revivalPromises));\n          }).then(function (_ref9) {\n            var _ref10 = _slicedToArray(_ref9, 1),\n                r = _ref10[0];\n\n            return r;\n          });\n        }\n      }\n\n      return isThenable(ret) ? sync && opts.throwOnBadSyncType ? function () {\n        throw new TypeError('Sync method requested but async result obtained');\n      }() : hasConstructorOf(ret, TypesonPromise) ? ret.p.then(checkUndefined) : ret : !sync && opts.throwOnBadSyncType ? function () {\n        throw new TypeError('Async method requested but sync result obtained');\n      }() : sync ? checkUndefined(ret) : Promise.resolve(checkUndefined(ret));\n    }\n    /**\n     * Also sync but throws on non-sync result.\n     * @param {Any} obj\n     * @param {object} opts\n     * @returns {Any}\n     */\n\n  }, {\n    key: \"reviveSync\",\n    value: function reviveSync(obj, opts) {\n      return this.revive(obj, _objectSpread2({\n        throwOnBadSyncType: true\n      }, opts, {\n        sync: true\n      }));\n    }\n    /**\n    * @param {Any} obj\n    * @param {object} opts\n    * @returns {Promise} Resolves to `*`\n    */\n\n  }, {\n    key: \"reviveAsync\",\n    value: function reviveAsync(obj, opts) {\n      return this.revive(obj, _objectSpread2({\n        throwOnBadSyncType: true\n      }, opts, {\n        sync: false\n      }));\n    }\n    /**\n     * Register types.\n     * For examples on how to use this method, see\n     *   {@link https://github.com/dfahlander/typeson-registry/tree/master/types}.\n     * @param {object.<string,Function[]>[]} typeSpecSets - Types and\n     *   their functions [test, encapsulate, revive];\n     * @param {object} opts\n     * @returns {Typeson}\n     */\n\n  }, {\n    key: \"register\",\n    value: function register(typeSpecSets, opts) {\n      opts = opts || {};\n      [].concat(typeSpecSets).forEach(function R(typeSpec) {\n        var _this = this;\n\n        // Allow arrays of arrays of arrays...\n        if (isArray(typeSpec)) {\n          return typeSpec.map(function (typSpec) {\n            return R.call(_this, typSpec);\n          });\n        }\n\n        typeSpec && keys(typeSpec).forEach(function (typeId) {\n          if (typeId === '#') {\n            throw new TypeError('# cannot be used as a type name as it is reserved ' + 'for cyclic objects');\n          } else if (Typeson.JSON_TYPES.includes(typeId)) {\n            throw new TypeError('Plain JSON object types are reserved as type names');\n          }\n\n          var spec = typeSpec[typeId];\n          var replacers = spec && spec.testPlainObjects ? this.plainObjectReplacers : this.nonplainObjectReplacers;\n          var existingReplacer = replacers.filter(function (r) {\n            return r.type === typeId;\n          });\n\n          if (existingReplacer.length) {\n            // Remove existing spec and replace with this one.\n            replacers.splice(replacers.indexOf(existingReplacer[0]), 1);\n            delete this.revivers[typeId];\n            delete this.types[typeId];\n          }\n\n          if (typeof spec === 'function') {\n            // Support registering just a class without replacer/reviver\n            var Class = spec;\n            spec = {\n              test: function test(x) {\n                return x && x.constructor === Class;\n              },\n              replace: function replace(x) {\n                return _objectSpread2({}, x);\n              },\n              revive: function revive(x) {\n                return Object.assign(Object.create(Class.prototype), x);\n              }\n            };\n          } else if (isArray(spec)) {\n            var _spec = spec,\n                _spec2 = _slicedToArray(_spec, 3),\n                test = _spec2[0],\n                replace = _spec2[1],\n                revive = _spec2[2];\n\n            spec = {\n              test: test,\n              replace: replace,\n              revive: revive\n            };\n          }\n\n          if (!spec || !spec.test) {\n            return;\n          }\n\n          var replacerObj = {\n            type: typeId,\n            test: spec.test.bind(spec)\n          };\n\n          if (spec.replace) {\n            replacerObj.replace = spec.replace.bind(spec);\n          }\n\n          if (spec.replaceAsync) {\n            replacerObj.replaceAsync = spec.replaceAsync.bind(spec);\n          }\n\n          var start = typeof opts.fallback === 'number' ? opts.fallback : opts.fallback ? 0 : Infinity;\n\n          if (spec.testPlainObjects) {\n            this.plainObjectReplacers.splice(start, 0, replacerObj);\n          } else {\n            this.nonplainObjectReplacers.splice(start, 0, replacerObj);\n          } // Todo: We might consider a testAsync type\n\n\n          if (spec.revive || spec.reviveAsync) {\n            var reviverObj = {};\n\n            if (spec.revive) {\n              reviverObj.revive = spec.revive.bind(spec);\n            }\n\n            if (spec.reviveAsync) {\n              reviverObj.reviveAsync = spec.reviveAsync.bind(spec);\n            }\n\n            this.revivers[typeId] = [reviverObj, {\n              plain: spec.testPlainObjects\n            }];\n          } // Record to be retrieved via public types property.\n\n\n          this.types[typeId] = spec;\n        }, this);\n      }, this);\n      return this;\n    }\n  }]);\n\n  return Typeson;\n}();\n/**\n * We keep this function minimized so if using two instances of this\n * library, where one is minimized and one is not, it will still work\n * with `hasConstructorOf`.\n * @class\n */\n\n\nvar Undefined = function Undefined() {\n  _classCallCheck(this, Undefined);\n}; // eslint-disable-line space-before-blocks\n\n\nUndefined.__typeson__type__ = 'TypesonUndefined'; // The following provide classes meant to avoid clashes with other values\n// To insist `undefined` should be added\n\nTypeson.Undefined = Undefined; // To support async encapsulation/stringification\n\nTypeson.Promise = TypesonPromise; // Some fundamental type-checking utilities\n\nTypeson.isThenable = isThenable;\nTypeson.toStringTag = toStringTag;\nTypeson.hasConstructorOf = hasConstructorOf;\nTypeson.isObject = isObject;\nTypeson.isPlainObject = isPlainObject;\nTypeson.isUserObject = isUserObject;\nTypeson.escapeKeyPathComponent = escapeKeyPathComponent;\nTypeson.unescapeKeyPathComponent = unescapeKeyPathComponent;\nTypeson.getByKeyPath = getByKeyPath;\nTypeson.getJSONType = getJSONType;\nTypeson.JSON_TYPES = ['null', 'boolean', 'number', 'string', 'array', 'object'];\n\nexport default Typeson;\n","import sparseUndefined from './sparse-undefined.js';\nimport undf from '../types/undef.js';\n\nconst undef = [\n    sparseUndefined,\n    undf\n];\n\nexport default undef;\n","// This does not preserve `undefined` in sparse arrays; see the `undefined`\n//  or `sparse-undefined` preset\nimport Typeson from 'typeson';\n\nconst undef = {\n    undef: {\n        test (x, stateObj) {\n            return typeof x === 'undefined' &&\n                (stateObj.ownKeys || !('ownKeys' in stateObj));\n        },\n        replace (n) { return 0; },\n        revive (s) {\n            // Will add `undefined` (returning `undefined` would instead\n            //   avoid explicitly setting)\n            return new Typeson.Undefined();\n        }\n    }\n};\n\nexport default undef;\n"],"names":["sparseUndefined","sparseArrays","testPlainObjects","test","x","Array","isArray","replace","a","stateObj","iterateUnsetNumeric","ownKeys","n","revive","s","_typeof","obj","Symbol","_typeof2","iterator","constructor","prototype","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_defineProperty","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","_objectSpread2","source","forEach","getOwnPropertyDescriptors","defineProperties","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","toString","call","_arr","_n","_d","_e","_s","_i","next","_nonIterableRest","_toConsumableArray","_arrayWithoutHoles","arr2","_iterableToArray","iter","from","_nonIterableSpread","TypesonPromise","f","p","__typeson__type__","toStringTag","onFulfilled","onRejected","_this","typesonResolve","typesonReject","res","v","meth","promArr","map","prom","toStr","hasOwn","hasOwnProperty","getProto","getPrototypeOf","fnToString","isThenable","catchCheck","isObject","val","slice","hasConstructorOf","b","proto","Ctor","isPlainObject","escapeKeyPathComponent","keyPathComponent","unescapeKeyPathComponent","getByKeyPath","keyPath","period","indexOf","innerObj","setAtKeyPath","hasOwn$1","internalStateObjPropsToIgnore","nestedPathsFirst","keypath","as","match","bs","Typeson","options","plainObjectReplacers","nonplainObjectReplacers","revivers","types","_createClass","protoProps","staticProps","stringify","replacer","space","opts","stringification","encapsulated","encapsulate","JSON","stringifySync","throwOnBadSyncType","sync","stringifyAsync","parse","text","reviver","parseSync","parseAsync","specialTypeNames","returnTypeNames","rootTypeName","iterateNone","that","refObjs","refKeys","promisesDataRoot","cyclic","encapsulateObserver","ret","_encapsulate","finish","typeNames","values","getJSONType","Set","$types","$","checkPromises","_x","_x2","_checkPromises","regeneratorRuntime","mark","_callee2","promisesData","promResults","wrap","_callee2$","_context2","prev","all","pd","sent","_ref","_callee","promResult","newPromisesData","_promisesData$splice","_promisesData$splice2","prData","_prData","parentObj","detectedType","encaps","isTypesonPromise","encaps2","_callee$","_context","splice","abrupt","stop","_x3","_adaptBuiltinStateObjectProperties","ownKeysObj","cb","assign","vals","prop","tmp","resolvingTypesonPromise","observerData","$typeof","runObserver","type","awaitingTypesonPromise","includes","isNaN","Infinity","replaced","iterateIn","refIndex","cyclicKeypath","clone","isPlainObj","isArr","ArrayBuffer","addLength","_loop","kp","Boolean","endIterateIn","end","endIterateOwn","vl","_loop2","endIterateUnsetNumeric","plainObject","replacers","existing","concat","replaceAsync","replacing","typeDetected","encapsulateSync","encapsulateAsync","keyPathResolutions","ignore$Types","executeReviver","Error","reviveAsync","revivalPromises","checkUndefined","retrn","Undefined","possibleTypesonPromise","revivePlainObjects","plainObjectTypes","entries","_ref4","_ref5","plain","sort","reduce","reducer","_ref8","newVal","_revive","_clone","k","set","_keyPathResolutions$","_target","_clone2","_ret","typ","r","_ref9","reviveSync","register","typeSpecSets","R","typeSpec","typSpec","typeId","JSON_TYPES","spec","existingReplacer","Class","create","_spec2","replacerObj","bind","start","fallback","reviverObj","isUserObject","undef"],"mappings":"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"}